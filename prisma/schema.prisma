generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                      String                 @id @default(uuid())
  name                    String?
  email                   String?                @unique
  emailVerified           DateTime?
  subscriptionId          String?
  image                   String?
  password                String?
  role                    UserRole               @default(USER)
  accounts                Account[]
  isTwoFactorEnabled      Boolean                @default(false)
  twoFactorConfirmation   TwoFactorConfirmation?
  twoFactorConfirmationId String?                @unique
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  VerificationCode        VerificationCode[]
  Organization            Organization[]
  Member                  Member[]
}

model VerificationCode {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  email     String
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId, email])
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Organization {
  id          String   @id @default(uuid())
  name        String
  slug        String   @unique
  description String?
  icon        String?
  ownerId     String // Relacionamento com o dono da organização
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  members     Member[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Invite      Invite[]

  @@index([slug])
}

model Member {
  id             String       @id @default(uuid())
  userId         String // Relacionamento com o usuário
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organizationId String // Relacionamento com a organização
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  role           MemberRole   @default(MEMBER) // Função dentro da organização
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([userId, organizationId]) // Garante que um usuário só pode ser membro de uma organização uma vez
}

enum MemberRole {
  OWNER // Dono da organização
  ADMIN // Administrador da organização
  MEMBER // Membro comum
}

model Invite {
  id             String       @id @default(uuid())
  email          String
  role           MemberRole   @default(MEMBER)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  token          String       @unique

  @@unique([email, organizationId]) // Garante que um email só pode ser convidado uma vez para a mesma organização
}
